************ ************ ************

**get input: ls *le* *.txt | rev >> file_fion.txt
result after char: l
result after char: ls

..Got word before create token: ls

  .real glob location in word: { 00 }

  .real glob location in word: { 00 }
result after char: *
result after char: *l
result after char: *le
result after char: *le*

..Got word before create token: *le*

  .real glob location in word: { 1001 }

  .real glob location in word: { 1001 }
result after char: *
result after char: *.
result after char: *.t
result after char: *.tx
result after char: *.txt

..Got word before create token: *.txt

  .real glob location in word: { 10000 }

  .real glob location in word: { 10000 }
result after char: r
result after char: re
result after char: rev

..Got word before create token: rev

  .real glob location in word: { 000 }

  .real glob location in word: { 000 }
result after char: f
result after char: fi
result after char: fil
result after char: file
result after char: file_
result after char: file_f
result after char: file_fi
result after char: file_fio
result after char: file_fion
result after char: file_fion.
result after char: file_fion.t
result after char: file_fion.tx
result after char: file_fion.txt

..Got word before create token: file_fion.txt

  .real glob location in word: { 0000000000000 }

  .real glob location in word: { 0000000000000 }

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: ls, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: fileout, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 3: value: file2, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 4: value: file_fion.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 5: value: file1, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 6: value: outfile77, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 7: value: outfile78, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 8: value: outfile, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 9: value: outfile76, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 10: value: commands_WIP.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 11: value: file_fion.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 12: value: commands.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 13: value: commands_block.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 14: value: |, type: 1
   in: 0, out: 1 cmd: (null) par_n: 0

++token 15: value: rev, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 16: value: >>, type: 5
   in: 0, out: 1 cmd: (null) par_n: 0

++token 17: value: file_fion.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 2

*Tab size: 3
* *PASS to token in while : ls
**Filling tab: add line 0: ls
**Filling tab: add line 0: fileout
**Filling tab: add line 0: file2
**Filling tab: add line 0: file_fion.txt
**Filling tab: add line 0: file1
**Filling tab: add line 0: outfile77
**Filling tab: add line 0: outfile78
**Filling tab: add line 0: outfile
**Filling tab: add line 0: outfile76
**Filling tab: add line 0: commands_WIP.txt
**Filling tab: add line 0: file_fion.txt
**Filling tab: add line 0: commands.txt
**Filling tab: add line 0: commands_block.txt
* *PASS to token in tab unit: |
* *PASS to token in while : |
* *PASS to token in op : |
**Filling tab op: add line 1: |
* *PASS to token in while : rev
**Filling tab: add line 2: rev
**Filling tab: add line 2: >>
**Filling tab: add line 2: file_fion.txt

Until line 3, finish fill_tab. Executing>>>>-------

   ##(pipe0: 5, pipe1: 6)##
          pipe[1] before close: 6
pre (before assign): -1 
pre(after assign) = 5, pipe[0] = 5 

**get cmd: ls

**get cmd: fileout

**get cmd: file2

**get cmd: file_fion.txt

**get cmd: file1

**get cmd: outfile77

**get cmd: outfile78

**get cmd: outfile

**get cmd: outfile76

**get cmd: commands_WIP.txt

**get cmd: file_fion.txt

**get cmd: commands.txt

**get cmd: commands_block.txt

---fill child cmd: 

++token 1: value: ls, type: 0
   in: 0, out: 1 cmd: ls par_n: 0

++token 2: value: fileout, type: 0
   in: 0, out: 1 cmd: fileout par_n: 0

++token 3: value: file2, type: 0
   in: 0, out: 1 cmd: file2 par_n: 0

++token 4: value: file_fion.txt, type: 0
   in: 0, out: 1 cmd: file_fion.txt par_n: 0

++token 5: value: file1, type: 0

**get cmd: rev
   in: 0, out: 1 cmd: file1 par_n: 0

++token 6: value: outfile77, type: 0

   in: 0, out: 1 cmd: outfile77 par_n: 0
---fill last cmd: 


++token 7: value: outfile78, type: 0
   in: 0, out: 1 cmd: outfile78 par_n: 0
++token 1: value: rev, type: 0

   in: 0, out: 1 cmd: rev par_n: 0
++token 8: value: outfile, type: 0

   in: 0, out: 1 cmd: outfile par_n: 0
++token 2: value: >>, type: 5

   in: 0, out: 1 cmd: (null) par_n: 0
++token 9: value: outfile76, type: 0

   in: 0, out: 1 cmd: outfile76 par_n: 0
++token 3: value: file_fion.txt, type: 0

   in: 0, out: 6 cmd: (null) par_n: 0
++token 10: value: commands_WIP.txt, type: 0
   in: 0, out: 1 cmd: commands_WIP.txt par_n: 0

++token 11: value: file_fion.txt, type: 0
   in: 0, out: 1 cmd: file_fion.txt par_n: 0

          pre before close: 5
++token 12: value: commands.txt, type: 0
   in: 0, out: 1 cmd: commands.txt par_n: 0

++token 13: value: commands_block.txt, type: 0
   in: 0, out: 1 cmd: commands_block.txt par_n: 0

last-g_status **: 0
************ ************ ************

**get input: (( echo ggg && true || echo $? || echo bbb && echo $? ) || echo $?)
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo
result after char: g
result after char: gg
result after char: ggg

..Got word before create token: ggg
result after char: t
result after char: tr
result after char: tru
result after char: true

..Got word before create token: true
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: 0
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo
result after char: b
result after char: bb
result after char: bbb

..Got word before create token: bbb
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: 0
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: 0

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: (, type: 8
   in: 0, out: 1 cmd: (null) par_n: 1

++token 2: value: (, type: 8
   in: 0, out: 1 cmd: (null) par_n: 2

++token 3: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 4: value: ggg, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 5: value: &&, type: 6
   in: 0, out: 1 cmd: (null) par_n: 2

++token 6: value: true, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 7: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 2

++token 8: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 9: value: 0, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 10: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 2

++token 11: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 12: value: bbb, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 13: value: &&, type: 6
   in: 0, out: 1 cmd: (null) par_n: 2

++token 14: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 15: value: 0, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 16: value: ), type: 9
   in: 0, out: 1 cmd: (null) par_n: 1

++token 17: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 1

++token 18: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 1

++token 19: value: 0, type: 0
   in: 0, out: 1 cmd: (null) par_n: 1

++token 20: value: ), type: 9
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 6

*Tab size: 11
* *PASS to token in while : (
* *PASS to token in while : (
* *PASS to token in while : echo
**Filling tab: add line 0: echo
**Filling tab: add line 0: ggg
* *PASS to token in tab unit: &&
* *PASS to token in while : &&
* *PASS to token in op : &&
**Filling tab op: add line 1: &&
* *PASS to token in while : true
**Filling tab: add line 2: true
* *PASS to token in tab unit: ||
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 3: ||
* *PASS to token in while : echo
**Filling tab: add line 4: echo
**Filling tab: add line 4: 0
* *PASS to token in tab unit: ||
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 5: ||
* *PASS to token in while : echo
**Filling tab: add line 6: echo
**Filling tab: add line 6: bbb
* *PASS to token in tab unit: &&
* *PASS to token in while : &&
* *PASS to token in op : &&
**Filling tab op: add line 7: &&
* *PASS to token in while : echo
**Filling tab: add line 8: echo
**Filling tab: add line 8: 0
* *PASS to token in tab unit: )
* *PASS to token in while : )
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 9: ||
* *PASS to token in while : echo
**Filling tab: add line 10: echo
**Filling tab: add line 10: 0
* *PASS to token in tab unit: )

Until line 11, finish fill_tab. Executing>>>>-------

last-g_status **: 0

last-g_status **: 0

**start fill simple cmd_array

************** ************ ************

**get input: (( echo ggg && true || echo $LOGNAME || echo bbb && echo $LOGNAME ) || echo $LOGNAME)
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo
result after char: g
result after char: gg
result after char: ggg

..Got word before create token: ggg
result after char: t
result after char: tr
result after char: tru
result after char: true

..Got word before create token: true
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: lanx
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo
result after char: b
result after char: bb
result after char: bbb

..Got word before create token: bbb
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: lanx
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: lanx

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: (, type: 8
   in: 0, out: 1 cmd: (null) par_n: 1

++token 2: value: (, type: 8
   in: 0, out: 1 cmd: (null) par_n: 2

++token 3: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 4: value: ggg, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 5: value: &&, type: 6
   in: 0, out: 1 cmd: (null) par_n: 2

++token 6: value: true, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 7: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 2

++token 8: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 9: value: lanx, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 10: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 2

++token 11: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 12: value: bbb, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 13: value: &&, type: 6
   in: 0, out: 1 cmd: (null) par_n: 2

++token 14: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 15: value: lanx, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 16: value: ), type: 9
   in: 0, out: 1 cmd: (null) par_n: 1

++token 17: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 1

++token 18: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 1

++token 19: value: lanx, type: 0
   in: 0, out: 1 cmd: (null) par_n: 1

++token 20: value: ), type: 9
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 6

*Tab size: 11
* *PASS to token in while : (
* *PASS to token in while : (
* *PASS to token in while : echo
**Filling tab: add line 0: echo
**Filling tab: add line 0: ggg
* *PASS to token in tab unit: &&
* *PASS to token in while : &&
* *PASS to token in op : &&
**Filling tab op: add line 1: &&
* *PASS to token in while : true
**Filling tab: add line 2: true
* *PASS to token in tab unit: ||
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 3: ||
* *PASS to token in while : echo
**Filling tab: add line 4: echo
**Filling tab: add line 4: lanx
* *PASS to token in tab unit: ||
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 5: ||
* *PASS to token in while : echo
**Filling tab: add line 6: echo
**Filling tab: add line 6: bbb
* *PASS to token in tab unit: &&
* *PASS to token in while : &&
* *PASS to token in op : &&
**Filling tab op: add line 7: &&
* *PASS to token in while : echo
**Filling tab: add line 8: echo
**Filling tab: add line 8: lanx
* *PASS to token in tab unit: )
* *PASS to token in while : )
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 9: ||
* *PASS to token in while : echo
**Filling tab: add line 10: echo
**Filling tab: add line 10: lanx
* *PASS to token in tab unit: )

Until line 11, finish fill_tab. Executing>>>>-------

**start fill simple cmd_array
************ ************ ************

**get input: (( echo ggg && true || echo $LOGNAME || echo bbb && echo $LOGNAME ) || echo $LOGNAME)
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo
result after char: g
result after char: gg
result after char: ggg

..Got word before create token: ggg
result after char: t
result after char: tr
result after char: tru
result after char: true

..Got word before create token: true
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: lanx
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo
result after char: b
result after char: bb
result after char: bbb

..Got word before create token: bbb
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: lanx
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: lanx

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: (, type: 8
   in: 0, out: 1 cmd: (null) par_n: 1

++token 2: value: (, type: 8
   in: 0, out: 1 cmd: (null) par_n: 2

++token 3: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 4: value: ggg, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 5: value: &&, type: 6
   in: 0, out: 1 cmd: (null) par_n: 2

++token 6: value: true, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 7: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 2

++token 8: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 9: value: lanx, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 10: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 2

++token 11: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 12: value: bbb, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 13: value: &&, type: 6
   in: 0, out: 1 cmd: (null) par_n: 2

++token 14: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 15: value: lanx, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 16: value: ), type: 9
   in: 0, out: 1 cmd: (null) par_n: 1

++token 17: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 1

++token 18: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 1

++token 19: value: lanx, type: 0
   in: 0, out: 1 cmd: (null) par_n: 1

++token 20: value: ), type: 9
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 6

*Tab size: 11
* *PASS to token in while : (
* *PASS to token in while : (
* *PASS to token in while : echo
**Filling tab: add line 0: echo
**Filling tab: add line 0: ggg
* *PASS to token in tab unit: &&
* *PASS to token in while : &&
* *PASS to token in op : &&
**Filling tab op: add line 1: &&
* *PASS to token in while : true
**Filling tab: add line 2: true
* *PASS to token in tab unit: ||
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 3: ||
* *PASS to token in while : echo
**Filling tab: add line 4: echo
**Filling tab: add line 4: lanx
* *PASS to token in tab unit: ||
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 5: ||
* *PASS to token in while : echo
**Filling tab: add line 6: echo
**Filling tab: add line 6: bbb
* *PASS to token in tab unit: &&
* *PASS to token in while : &&
* *PASS to token in op : &&
**Filling tab op: add line 7: &&
* *PASS to token in while : echo
**Filling tab: add line 8: echo
**Filling tab: add line 8: lanx
* *PASS to token in tab unit: )
* *PASS to token in while : )
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 9: ||
* *PASS to token in while : echo
**Filling tab: add line 10: echo
**Filling tab: add line 10: lanx
* *PASS to token in tab unit: )

Until line 11, finish fill_tab. Executing>>>>-------

last-g_status **: 0

**start f************ ************ ************

**get input: (( echo ggg && true || echo $LOGNAME || echo bbb && echo $LOGNAME ) || echo $LOGNAME)
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo
result after char: g
result after char: gg
result after char: ggg

..Got word before create token: ggg
result after char: t
result after char: tr
result after char: tru
result after char: true

..Got word before create token: true
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: lanx
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo
result after char: b
result after char: bb
result after char: bbb

..Got word before create token: bbb
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: lanx
result after char: e
result after char: ec
result after char: ech
result after char: echo

..Got word before create token: echo

..Got word before create token: lanx

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: (, type: 8
   in: 0, out: 1 cmd: (null) par_n: 1

++token 2: value: (, type: 8
   in: 0, out: 1 cmd: (null) par_n: 2

++token 3: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 4: value: ggg, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 5: value: &&, type: 6
   in: 0, out: 1 cmd: (null) par_n: 2

++token 6: value: true, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 7: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 2

++token 8: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 9: value: lanx, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 10: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 2

++token 11: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 12: value: bbb, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 13: value: &&, type: 6
   in: 0, out: 1 cmd: (null) par_n: 2

++token 14: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 15: value: lanx, type: 0
   in: 0, out: 1 cmd: (null) par_n: 2

++token 16: value: ), type: 9
   in: 0, out: 1 cmd: (null) par_n: 1

++token 17: value: ||, type: 7
   in: 0, out: 1 cmd: (null) par_n: 1

++token 18: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 1

++token 19: value: lanx, type: 0
   in: 0, out: 1 cmd: (null) par_n: 1

++token 20: value: ), type: 9
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 6

*Tab size: 11
* *PASS to token in while : (
* *PASS to token in while : (
* *PASS to token in while : echo
**Filling tab: add line 0: echo
**Filling tab: add line 0: ggg
* *PASS to token in tab unit: &&
* *PASS to token in while : &&
* *PASS to token in op : &&
**Filling tab op: add line 1: &&
* *PASS to token in while : true
**Filling tab: add line 2: true
* *PASS to token in tab unit: ||
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 3: ||
* *PASS to token in while : echo
**Filling tab: add line 4: echo
**Filling tab: add line 4: lanx
* *PASS to token in tab unit: ||
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 5: ||
* *PASS to token in while : echo
**Filling tab: add line 6: echo
**Filling tab: add line 6: bbb
* *PASS to token in tab unit: &&
* *PASS to token in while : &&
* *PASS to token in op : &&
**Filling tab op: add line 7: &&
* *PASS to token in while : echo
**Filling tab: add line 8: echo
**Filling tab: add line 8: lanx
* *PASS to token in tab unit: )
* *PASS to token in while : )
* *PASS to token in while : ||
* *PASS to token in op : ||
**Filling tab op: add line 9: ||
* *PASS to token in while : echo
**Filling tab: add line 10: echo
**Filling tab: add line 10: lanx
* *PASS to token in tab unit: )

Until line 11, finish fill_tab. Executing>>>>-------

last-g_status **: 0

last-g_st************ ************ ************

**get input: exit
result after char: e
result after char: ex
result after char: exi
result after char: exit

..Got word before create token: exit

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
* *PASS to token in while : exit
**Filling tab: add line 0: exit

Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 0
************ ************ ************

**get input: exit 42
result after char: e
result after char: ex
result after char: exi
result after char: exit

..Got word before create token: exit
result after char: 4
result after char: 42

..Got word before create token: 42

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: 42, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
* *PASS to token in while : exit
**Filling tab: add line 0: exit
**Filling tab: add line 0: 42

Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 42
************ ************ ************

**get input: exit iugef
result after char: e
result after char: ex
result after char: exi
result after char: exit

..Got word before create token: exit
result after char: i
result after char: iu
result after char: iug
result after char: iuge
result after char: iugef

..Got word before create token: iugef

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: iugef, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
* *PASS to token in while : exit
**Filling tab: add line 0: exit
**Filling tab: add line 0: iugef

Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 2
************ ************ ************

**get input: ls *le* *.txt | rev >> file_fion.txt
result after char: l
result after char: ls

..Got word before create token: ls
result after char: *
result after char: *l
result after char: *le
result after char: *le*

..Got word before create token: *le*

  .real glob location in word: { 1001 }
result after char: *
result after char: *.
result after char: *.t
result after char: *.tx
result after char: *.txt

..Got word before create token: *.txt

  .real glob location in word: { 10000 }
result after char: r
result after char: re
result after char: rev

..Got word before create token: rev
result after char: f
result after char: fi
result after char: fil
result after char: file
result after char: file_
result after char: file_f
result after char: file_fi
result after char: file_fio
result after char: file_fion
result after char: file_fion.
result after char: file_fion.t
result after char: file_fion.tx
result after char: file_fion.txt

..Got word before create token: file_fion.txt

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: ls, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: fileout, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 3: value: file2, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 4: value: file_fion.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 5: value: file1, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 6: value: outfile77, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 7: value: outfile78, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 8: value: outfile, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 9: value: outfile76, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 10: value: commands_WIP.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 11: value: file_fion.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 12: value: commands.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 13: value: commands_block.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 14: value: |, type: 1
   in: 0, out: 1 cmd: (null) par_n: 0

++token 15: value: rev, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 16: value: >>, type: 5
   in: 0, out: 1 cmd: (null) par_n: 0

++token 17: value: file_fion.txt, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 2

*Tab size: 3
* *PASS to token in while : ls
**Filling tab: add line 0: ls
**Filling tab: add line 0: fileout
**Filling tab: add line 0: file2
**Filling tab: add line 0: file_fion.txt
**Filling tab: add line 0: file1
**Filling tab: add line 0: outfile77
**Filling tab: add line 0: outfile78
**Filling tab: add line 0: outfile
**Filling tab: add line 0: outfile76
**Filling tab: add line 0: commands_WIP.txt
**Filling tab: add line 0: file_fion.txt
**Filling tab: add line 0: commands.txt
**Filling tab: add line 0: commands_block.txt
* *PASS to token in tab unit: |
* *PASS to token in while : |
* *PASS to token in op : |
**Filling tab op: add line 1: |
* *PASS to token in while : rev
**Filling tab: add line 2: rev
**Filling tab: add line 2: >>
**Filling tab: add line 2: file_fion.txt

Until line 3, finish fill_tab. Executing>>>>-------

   ##(pipe0: 5, pipe1: 6)##

**get cmd: ls

**get cmd: fileout

**get cmd: file2

**get cmd: file_fion.txt

**get cmd: file1

**get cmd: outfile77

**get cmd: outfile78

**get cmd: outfile

**get cmd: outfile76

**get cmd: commands_WIP.txt

**get cmd: file_fion.txt

**get cmd: commands.txt

**get cmd: commands_block.txt

---fill child cmd: 

++token 1: value: ls, type: 0
   in: 0, out: 1 cmd: ls par_n: 0

++token 2: value: fileout, type: 0
   in: 0, out: 1 cmd: fileout par_n: 0

++token 3: value: file2, type: 0
   in: 0, out: 1 cmd: file2 par_n: 0

++token 4: value: file_fion.txt, type: 0
   in: 0, out: 1 cmd: file_fion.txt par_n: 0

++token 5: value: file1, type: 0
   in: 0, out: 1 cmd: file1 par_n: 0

++token 6: value: outfile77, type: 0
   in: 0, out: 1 cmd: outfile77 par_n: 0

++token 7: value: outfile78, type: 0
   in: 0, out: 1 cmd: outfile78 ************ ************ ************

**get input: exit 42
result after char: e
result after char: ex
result after char: exi
result after char: exit

..Got word before create token: exit
result after char: 4
result after char: 42

..Got word before create token: 42

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: 42, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
* *PASS to token in while : exit
**Filling tab: add line 0: exit
**Filling tab: add line 0: 42

Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 42
************ ************ ************

**get input: exit 42hgzef
result after char: e
result after char: ex
result after char: exi
result after char: exit

..Got word before create token: exit
result after char: 4
result after char: 42
result after char: 42h
result after char: 42hg
result after char: 42hgz
result after char: 42hgze
result after char: 42hgzef

..Got word before create token: 42hgzef

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: 42hgzef, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
* *PASS to token in while : exit
**Filling tab: add line 0: exit
**Filling tab: add line 0: 42hgzef

Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 2
************ ************ ************

**get input: exit jhzef
result after char: e
result after char: ex
result after char: exi
result after char: exit

..Got word before create token: exit
result after char: j
result after char: jh
result after char: jhz
result after char: jhze
result after char: jhzef

..Got word before create token: jhzef

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: jhzef, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
* *PASS to token in while : exit
**Filling tab: add line 0: exit
**Filling tab: add line 0: jhzef

Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 2
************ ************ ************

**get input: <noexist cat
result after char: n
result after char: no
result after char: noe
result after char: noex
result after char: noexi
result after char: noexis
result after char: noexist

..Got word before create token: noexist
result after char: c
result after char: ca
result after char: cat

..Got word before create token: cat

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: <, type: 2
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: noexist, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 3: value: cat, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
* *PASS to token in while : <
**Filling tab: add line 0: <
**Filling tab: add line 0: noexist
**Filling tab: add line 0: cat

Until line 1, finish fill_tab. Executing>>>>-------

**start fill simple cmd_array
************ ************ ************

**get input: exit
result after char: e
result after char: ex
result after char: exi
result after char: exit

**add lexer succeed:

++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
**Filling tab: add line 0: exit


Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 0
************ ************ ************

**get input: exit 42
result after char: e
result after char: ex
result after char: exi
result after char: exit
result after char: 4
result after char: 42

**add lexer succeed:

++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: 42, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
**Filling tab: add line 0: exit

**Filling tab: add line 0: 42


Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 42
************ ************ ************

**get input: exit iugef
result after char: e
result after char: ex
result after char: exi
result after char: exit
result after char: i
result after char: iu
result after char: iug
result after char: iuge
result after char: iugef

**add lexer succeed:

++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: iugef, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
**Filling tab: add line 0: exit

**Filling tab: add line 0: iugef


Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 2
************ ************ ************

**get input: exit 42
result after char: e
result after char: ex
result after char: exi
result after char: exit
result after char: 4
result after char: 42

**add lexer succeed:

++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: 42, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
**Filling tab: add line 0: exit

**Filling tab: add line 0: 42


Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 42
************ ************ ************

**get input: exit 42hgzef
result after char: e
result after char: ex
result after char: exi
result after char: exit
result after char: 4
result after char: 42
result after char: 42h
result after char: 42hg
result after char: 42hgz
result after char: 42hgze
result after char: 42hgzef

**add lexer succeed:

++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: 42hgzef, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
**Filling tab: add line 0: exit

**Filling tab: add line 0: 42hgzef


Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 2
************ ************ ************

**get input: exit jhzef
result after char: e
result after char: ex
result after char: exi
result after char: exit
result after char: j
result after char: jh
result after char: jhz
result after char: jhze
result after char: jhzef

**add lexer succeed:

++token 1: value: exit, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: jhzef, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
**Filling tab: add line 0: exit

**Filling tab: add line 0: jhzef


Until line 1, finish fill_tab. Executing>>>>-------

last-g_status **: 2
************ ************ ************

**get input: echi e
result after char: e
result after char: ec
result after char: ech
result after char: echi
result after char: e

**add lexer succeed:

++token 1: value: echi, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: e, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
**Filling tab: add line 0: echi

**Filling tab: add line 0: e


Until line 1, finish fill_tab. Executing>>>>-------

**start fill simple cmd_array

**get cmd: echi

**get cmd: e

last-g_status **: 127
************ ************ ************

**get input: <noexist cat
result after char: n
result after char: no
result after char: noe
result after char: noex
result after char: noexi
result after char: noexis
result after char: noexist
result after char: c
result after char: ca
result after char: cat

**add lexer succeed:

++token 1: value: <, type: 2
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: noexist, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 3: value: cat, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
**Filling tab: add line 0: <

**Filling tab: add line 0: noexist

**Filling tab: add line 0: cat


Until line 1, finish fill_tab. Executing>>>>-------

**start fill simple cmd_array
************ ************ ************

**get input: echo "'$?'"
result after char: e
result after char: ec
result after char: ech
result after char: echo
result after char: '
result after char: '127'
double quoted_word: '127'

**add lexer succeed:

++token 1: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: '127', type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
**Filling tab: add line 0: echo

**Filling tab: add line 0: '127'


Until line 1, finish fill_tab. Executing>>>>-------

**start fill simple cmd_array

**get cmd: echo

**get cmd: '127'

last-g_status **: 0
************ ************ ************

**get input: echi e
result after char: e
result after char: ec
result after char: ech
result after char: echi
result after char: e

**add lexer succeed:

++token 1: value: echi, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: e, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
**Filling tab: add line 0: echi

**Filling tab: add line 0: e


Until line 1, finish fill_tab. Executing>>>>-------

**start fill simple cmd_array

**get cmd: echi

**get cmd: e

last-g_status **: 127
************ ************ ************

**get input: echo '"$?"'
result after char: e
result after char: ec
result after char: ech
result after char: echo

**add lexer succeed:

++token 1: value: echo, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

++token 2: value: "$?", type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
**Filling tab: add line 0: echo

**Filling tab: add line 0: "$?"


Until line 1, finish fill_tab. Executing>>>>-------

**start fill simple cmd_array

**get cmd: echo

**get cmd: "$?"

last-g_status **: 0
************ ************ ************

**get input: ls
result after char: l
result after char: ls

..Got word before create token: ls

**add lexer succeed:

**  lexer after stamped:
  
++token 1: value: ls, type: 0
   in: 0, out: 1 cmd: (null) par_n: 0

*nb of unit: 1

*Tab size: 1
* *PASS to token in while : ls
**Filling tab: add line 0: ls

Until line 1, finish fill_tab. Executing>>>>-------

**start fill simple cmd_array

**get cmd: ls

last-g_status **: 0
